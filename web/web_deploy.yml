AWSTemplateFormatVersion: '2010-09-09'
Description: "Cloudformation Deployment for website side of the document_aggregator"

Resources:
  AggregatorWebPageDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "AggregatorWebPageDeadLetterQueue"
  GetTopics: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        ZipFile: ""
      Description: "Get the topics currently in DynamoDB"
      FunctionName: GetTopics
      Handler: index.lambda_handler
      Layers: 
        - "arn:aws:lambda:us-east-1:353290830413:layer:boto3:38"
      MemorySize: 128
      Role: "arn:aws:iam::353290830413:role/lambda_test_role"
      Runtime: python3.6
      Timeout: 600
      DeadLetterConfig:
        TargetArn:
          Fn::GetAtt: [ AggregatorWebPageDeadLetterQueue, Arn ]
  AggregatorRestApiIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource:
                  Fn::GetAtt: [ GetTopics, Arn ]
  AggregatorRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "topics-api"
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL
  AggregatorTopicsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt: [ AggregatorRestApi, RootResourceId ]
      PathPart: 'topics'
      RestApiId: 
        Ref: AggregatorRestApi
  AggregatorTopicsMethod:
    Type: "AWS::ApiGateway::Method"  
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE #Temporary test value; update to use COGNITO_USER_POOLS later
      Integration:
        IntegrationHttpMethod: GET
        Credentials:
          Fn::GetAtt: [ AggregatorRestApiIamRole, Arn ]
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTopics.Arn}/invocations'
      ResourceId:
        Fn::GetAtt: [ AggregatorRestApi, RootResourceId ]
      RestApiId:
        Ref: AggregatorRestApi
  AggregatorTopicsModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      ContentType: 'application/json'
      RestApiId: 
        Ref: AggregatorRestApi
      Schema: {}
  AggregatorStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: 
        Ref: AggregatorDeployment
      Description: "Development stage for aggregator web api"
      RestApiId: 
        Ref: AggregatorRestApi
      StageName: 'dev'
  AggregatorDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: AggregatorTopicsMethod
    Properties:
      Description: "Deployment for aggregator web api"
      RestApiId: 
        Ref: AggregatorRestApi